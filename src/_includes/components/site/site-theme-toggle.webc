<div webc:root webc:keep aria-labelledby="label-select-theme">
  <span id="label-select-theme">Theme:</span>
  <span role="status" class="sr-only">Color theme is "auto".</span>
  <ul>
    <li>
      <input
        type="radio"
        id="select-theme-auto"
        name="select-theme"
        value="auto"
        checked
      />
      <label for="select-theme-auto">
        <svg viewBox="0 0 16 16" width="16" height="16" role="img" aria-labelledby="select-theme-auto-title" fill="currentColor">
          <title id="select-theme-auto-title">Automatic</title>
          <path d="M8 15A7 7 0 1 0 8 1v14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"/>
        </svg>
      </label>
    </li>
    <li>
      <input
        type="radio"
        id="select-theme-light"
        name="select-theme"
        value="light"
      />
      <label for="select-theme-light">
        <svg viewBox="0 0 16 16" width="16" height="16" role="img" aria-labelledby="select-theme-light-title" fill="currentColor">
          <title id="select-theme-light-title">Light Mode</title>
          <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
        </svg>
      </label>
    </li>
    <li>
      <input
        type="radio"
        id="select-theme-dark"
        name="select-theme"
        value="dark"
      />
      <label for="select-theme-dark">
        <svg viewBox="0 0 16 16" width="16" height="16" role="img" aria-labelledby="select-theme-dark-title" fill="currentColor">
          <title id="select-theme-dark-title">Dark Mode</title>
          <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/>
          <path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z"/>
        </svg>
      </label>
    </li>
  </ul>
</div>

<style webc:scoped>
  :host {
    display: inline-flex;
    gap: var(--half-space);
    align-items: center;
    margin-bottom: var(--half-space);
  }

  ul {
    display: inline-flex;
    gap: var(--half-space);
    list-style: none;
    margin: 0;
    padding: 0;
    line-height: 1;
  }

  li { position: relative; }

  [type="radio"] {
    position: absolute;
    opacity: 0;
    margin: 0;
    width: 100%;
    height: 100%;
  }

  label {
    display: inline-block;
    cursor: pointer;
    opacity: 0.5;
    padding: calc(var(--quarter-space)/2);
  }

  input[type="radio"]:checked + label {
    font-weight: var(--font-weight-bold);
    opacity: 1;
  }
</style>

<script>
  const host = document.querySelector("[aria-labelledby='label-select-theme']");
  const status = host.querySelector("[role='status']");
  const key = "userTheme";
  host.querySelectorAll("input[name='select-theme']").forEach((el) => {
    el.addEventListener("change", (e) => {
      e.preventDefault();
      const value = e.target.value;
      status.textContent = `Color theme is “${value}”.`;
      if (value === "auto") {
        delete document.body.dataset[key];
        clearValue();
      } else {
        document.body.dataset[key] = value;
        setValue(value);
      }
    });
  });

  const initialValue = getValue();
  if (initialValue !== "auto") {
    host.querySelector(`input[value='${initialValue}']`).click();
  }

  function getValue() {
    const fallback = "auto";
    try {
      return localStorage.getItem(key) || fallback;
    } catch (err) {
      console.error(err);
      return fallback;
    }
  }

  function setValue(value) {
    try {
      localStorage.setItem(key, value);
    } catch (err) {
      console.error(err);
    }
  }

  function clearValue() {
    try {
      localStorage.removeItem(key);
    } catch (err) {
      console.error(err);
    }
  }
</script>
